package org.bioinfo.ngs.qc.qualimap.gui.utils;

import java.io.IOException;

import javax.swing.JComponent;
import javax.swing.JLabel;

import org.bioinfo.commons.io.utils.FileUtils;
import org.bioinfo.commons.log.Logger;
import org.bioinfo.ngs.qc.qualimap.beans.BamQCRegionReporter;
import org.bioinfo.ngs.qc.qualimap.beans.BamStats;
import org.bioinfo.ngs.qc.qualimap.beans.GenomeLocator;
import org.bioinfo.ngs.qc.qualimap.gui.frames.HomeFrame;
import org.bioinfo.ngs.qc.qualimap.utils.UniqueID;

/**
 * Value Object to manage the properties of each tab
 * @author Luis Miguel Cruz
 */
public class TabPropertiesVO {
	/** Logger to print information */
	protected Logger logger;
	
	/** Variable that contains name of the folder of this tab VO */
	private StringBuilder outputFolder;
	
	/** Variable that informs if this tab has to show the gff graphics */
	private boolean gffSelected;
	
	/** Variable that contains name of the graphic image loaded into the
	 * right panel in the screen. */
	private StringBuilder graphicLoadedName;
	
	/** Variable to manage the last link selected in the left menu, to remove the
	 * link decoration setted before. */
	private JLabel lastLinkSelected;
	
	/**
	 * Variable that contains the reporter generated by the BamQC algorithm.
	 */
	private BamQCRegionReporter reporter, insideReporter, outsideReporter;
	
	/**
	 * Variable that contains the GraphicImagePanel for each tab where the 
	 * system load the graphic image at each moment.
	 */
	private GraphicImagePanel graphicImage;
	
	/**
	 * Variable that contains the type of analysis that is done
	 */
	private Integer typeAnalysis;
	
	/**
	 * Variable that contains the data for the tab of type RNA-Seq
	 */
	private RNAAnalysisVO rnaAnalysisVO;
	
	/**
	 * Variable to manage the last Element of the left split that contains
	 * the size, position, etc
	 */
	private JComponent leftSplitLastElement;	
	private boolean isPairedData;
    private boolean hasOutsideStats;
    private BamStats bamStats;
    private GenomeLocator genomeLocator;


    public BamStats getBamStats() {
          return bamStats;
    }

    public void setBamStats(BamStats bamStats) {
        this.bamStats = bamStats;
    }


    public GenomeLocator getGenomeLocator() {
        return genomeLocator;
    }

    public void setGenomeLocator(GenomeLocator genomeLocator) {
        this.genomeLocator = genomeLocator;
    }

	public boolean isPairedData() {
    	return isPairedData;
    }

	public void setPairedData(boolean isPairedData) {
    	this.isPairedData = isPairedData;
    }

	public TabPropertiesVO(){
		this.typeAnalysis = -1;
		this.outputFolder = null;
		this.gffSelected = false;
		this.reporter = new BamQCRegionReporter();
		this.insideReporter = new BamQCRegionReporter();
		this.outsideReporter = new BamQCRegionReporter();
		this.graphicImage = new GraphicImagePanel();
		this.rnaAnalysisVO = new RNAAnalysisVO();
	}
	
	public TabPropertiesVO(StringBuilder outputFolder, boolean gffSelected){
		this.typeAnalysis = -1;
		this.outputFolder = outputFolder;
		this.gffSelected = gffSelected;
		this.graphicImage = new GraphicImagePanel();
		this.rnaAnalysisVO = new RNAAnalysisVO();
	}
	
	/**
	 * Function to create an output folder to put the files generated by
	 * processed of the tab
	 * @return StringBuilder String with the path of the output folder
	 */
	public StringBuilder createDirectory(){
		boolean created = false;
		StringBuilder folderName = null;
		StringBuilder folderPath = new StringBuilder(HomeFrame.outputpath);
		StringBuilder outputDirPath = null;
		
		while(!created){
			try {
				folderName = new StringBuilder(""+UniqueID.get() + "/");
				outputDirPath = new StringBuilder(folderPath.toString() + folderName.toString());
				FileUtils.checkDirectory(outputDirPath.toString());
				logger.debug("This output folder exists, trying to create another one");
			} catch (IOException e) {
				if(outputDirPath != null){
					FileUtils.createDirectory(outputDirPath.toString(), true);
					this.setOutputFolder(folderName);
					
					created = true;
				}
			}
		}
		
		return outputDirPath;
	}

	public StringBuilder getOutputFolder() {
		return outputFolder;
	}

	public void setOutputFolder(StringBuilder outputFolder) {
		this.outputFolder = outputFolder;
	}

	public boolean isGffSelected() {
		return gffSelected;
	}

	public void setGffSelected(boolean gffSelected) {
		this.gffSelected = gffSelected;
	}

	public StringBuilder getGraphicLoadedName() {
		return graphicLoadedName;
	}

	public void setGraphicLoadedName(StringBuilder graphicLoadedName) {
		this.graphicLoadedName = graphicLoadedName;
	}

	public JLabel getLastLinkSelected() {
		return lastLinkSelected;
	}

	public void setLastLinkSelected(JLabel lastLinkSelected) {
		this.lastLinkSelected = lastLinkSelected;
	}

	public BamQCRegionReporter getReporter() {
		return reporter;
	}

	public void setReporter(BamQCRegionReporter reporter) {
		this.reporter = reporter;
	}

	public BamQCRegionReporter getInsideReporter() {
		return insideReporter;
	}

	public void setInsideReporter(BamQCRegionReporter insideReporter) {
		this.insideReporter = insideReporter;
	}

	public BamQCRegionReporter getOutsideReporter() {
		return outsideReporter;
	}

	public void setOutsideReporter(BamQCRegionReporter outsideReporter) {
		this.outsideReporter = outsideReporter;
	}

	public GraphicImagePanel getGraphicImage() {
		return graphicImage;
	}

	public void setGraphicImage(GraphicImagePanel graphicImage) {
		this.graphicImage = graphicImage;
	}
	
	public Integer getTypeAnalysis() {
		return typeAnalysis;
	}

	public void setTypeAnalysis(Integer typeAnalysis) {
		this.typeAnalysis = typeAnalysis;
	}

	public RNAAnalysisVO getRnaAnalysisVO() {
		return rnaAnalysisVO;
	}

	public void setLeftSplitLastElement(JComponent leftSplitLastElement) {
		this.leftSplitLastElement = leftSplitLastElement;
	}
}
